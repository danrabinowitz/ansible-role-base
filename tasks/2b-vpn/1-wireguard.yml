- name: Install wireguard homebrew package
  homebrew:
    name: ['wireguard-go', 'wireguard-tools']
    path: "{{ homebrew_prefix }}/bin"
  become: true
  become_user: "{{ admin_username }}"
  async: 7200
  poll: 0
  register: homebrew_wireguard
  when: not ansible_check_mode
- name: 'homebrew_wireguard - wait for async task'
  async_status:
    jid: "{{ homebrew_wireguard.ansible_job_id }}"
  register: job_result_homebrew_wireguard
  until: job_result_homebrew_wireguard.finished
  become: true
  become_user: "{{ admin_username }}"
  retries: 800
  delay: 10
  when: not ansible_check_mode


- set_fact:
    wg_dir: "/etc/wireguard"
  when: wg_dir is not defined

- name: Create dir
  file:
    path: "{{ wg_dir }}"
    state: directory
    owner: root
    group: wheel
    mode: 0700

- set_fact:
    path: "{{ ansible_env.PATH }}"
  check_mode: no
- set_fact:
    path: "{{ homebrew_prefix }}/bin:{{ ansible_env.PATH }}"
  check_mode: no
  when: ansible_os_family == 'Darwin'
- name: Print path
  ansible.builtin.debug:
    var: path
    verbosity: 0

- set_fact:
    wg_interface: wg0
  check_mode: no
- set_fact:
    wg_interface: utun0
  check_mode: no
  when: ansible_os_family == 'Darwin'

- set_fact:
    wireguard_peer_machine_names: "{{ wireguard_peer_machine_names_core | union(wireguard_peer_machine_names_additional_for_group) | difference( [ hostvars[inventory_hostname]['do_name'] ] ) }}"
  check_mode: no
  tags:
    - etc_hosts

- name: Convert names to wg ips
  local_action: "shell echo '{{ wireguard_peer_machine_names | join('\n')}}' | ../bin/names_to_wg_ips"
  changed_when: false
  check_mode: no
  register: wireguard_peer_ip_conversion

- set_fact:
    wireguard_peer_vpn_ips: "{{ wireguard_peer_ip_conversion.stdout_lines }}"
  check_mode: no

- name: Get wg ip of current inventory host
  local_action: "shell echo '{{ hostvars[inventory_hostname]['do_name'] }}' | ../bin/names_to_wg_ips"
  changed_when: false
  check_mode: no
  register: wireguard_ip_of_current_host_conversion

- set_fact:
    wireguard_ip_of_current_host: "{{ wireguard_ip_of_current_host_conversion.stdout }}"
  check_mode: no

- name: wireguard_ip_of_current_host
  debug:
    msg: "{{ wireguard_ip_of_current_host }}"
    verbosity: 0
  check_mode: no

- name: Generate key
  shell: wg genkey | tee "{{ wg_dir }}/privatekey" | wg pubkey > "{{ wg_dir }}/publickey" && printf "[Interface]\nListenPort = 51820\nSaveConfig = true\nAddress = {{ wireguard_ip_of_current_host }}\n\nPrivateKey = " > "{{ wg_dir }}/{{ wg_interface }}.conf" && cat "{{ wg_dir }}/privatekey" >> "{{ wg_dir }}/{{ wg_interface }}.conf" && printf "\n\n[Peer]\nPublicKey = pz/hyQ8EKY7nSoaCFAgd7SIl3SFDnrb02CT32VksTg8=\nAllowedIPs = 192.168.192.1\n\n[Peer]\nPublicKey = jpaV3qj/LsumpaWiF/JMBslEPKx38Tdn+CFuOpgic1w=\nAllowedIPs = 192.168.192.2\n" >> "{{ wg_dir }}/{{ wg_interface }}.conf"
  environment:
    PATH: "{{ path }}"
  args:
    creates: "{{ wg_dir }}/privatekey"
  register: install_wg_cfg
- name: Set wg private key perms
  file:
    path: "{{ wg_dir }}/privatekey"
    owner: root
    group: wheel
    mode: '0400'
- name: Set wg conf perms
  file:
    path: "{{ wg_dir }}/{{ wg_interface }}.conf"
    owner: root
    group: wheel
    mode: '0400'




# - name: Install wg config
#   template:
#     src: wireguard/config.conf.j2
#     dest: "{{ wg_dir }}/{{ wg_interface }}.conf"
#     owner: root
#     group: wheel
#     mode: '0400'
#     force: no
#   register: install_wg_cfg
#   # wg_private_key

- name: Start wg
  shell: "wg-quick up {{ wg_interface }}"
  environment:
    PATH: "{{ path }}"
  when: install_wg_cfg.changed







# - set_fact:
#     wg_interface: "{{ 'utun0' if ansible_os_family == 'Darwin' else 'wg0' }}"
#   check_mode: no
#   # when: wg_interface is not defined
#   tags:
#     - wireguard-plist
# - name: wg_interface
#   debug:
#     msg: "{{ wg_interface }}"
#     # verbosity: "1"
#   check_mode: no

- name: Get wg ips of all peers
  shell: "wg showconf {{ wg_interface }} | grep '^AllowedIPs ' | awk '{print $3}' | cut -d/ -f1"
  environment:
    PATH: "{{ path }}"
  changed_when: false
  check_mode: no
  register: get_current_wireguard_peer_ips

- name: get_current_wireguard_peer_ips
  debug:
    msg: "{{ get_current_wireguard_peer_ips }}"
    # verbosity: "1"
  check_mode: no

- set_fact:
    wireguard_peer_vpn_ips_current: "{{ get_current_wireguard_peer_ips.stdout_lines }}"
  check_mode: no

- set_fact:
    wireguard_peer_vpn_ips_to_add: "{{ wireguard_peer_vpn_ips | difference(wireguard_peer_vpn_ips_current) }}"
  check_mode: no

- name: wireguard_peer_vpn_ips_to_add
  debug:
    msg: "{{ wireguard_peer_vpn_ips_to_add }}"
    # verbosity: "1"
  check_mode: no

- set_fact:
    wireguard_peer_vpn_ips_to_remove: "{{ wireguard_peer_vpn_ips_current | difference(wireguard_peer_vpn_ips) }}"
  check_mode: no
- name: wireguard_peer_vpn_ips_to_remove
  debug:
    msg: "{{ wireguard_peer_vpn_ips_to_remove }}"
    # verbosity: "1"
  check_mode: no

- name: Get wg add peer commands
  local_action: "shell echo '{{ wireguard_peer_vpn_ips_to_add | join('\n')}}' | ../bin/wg_ips_to_add_peer_commands '{{ wireguard_ip_of_current_host }}' {{ wg_interface }}"
  changed_when: false
  check_mode: no
  register: get_wireguard_add_peer_commands
  when: (wireguard_peer_vpn_ips_to_add | length>0)

- name: get_wireguard_add_peer_commands
  debug:
    msg: "{{ get_wireguard_add_peer_commands }}"
    # verbosity: "1"
  check_mode: no
  when: (wireguard_peer_vpn_ips_to_add | length>0)

- name: Add wg peers
  shell: "{{ item }}"
  environment:
    PATH: "{{ path }}"
  with_items: "{{ get_wireguard_add_peer_commands.stdout_lines }}"
  when: (wireguard_peer_vpn_ips_to_add | length>0)

- name: Save and restart wg
  shell: "wg-quick save {{ wg_interface }} && wg-quick down {{ wg_interface }} && wg-quick up {{ wg_interface }}"
  environment:
    PATH: "{{ path }}"
  when: (wireguard_peer_vpn_ips_to_add | length>0) and (ansible_os_family == 'Debian')

# Start wg on bootup
- name: Install wg-quick service
  copy:
    src: lib/systemd/system/wg-quick@.service
    dest: /lib/systemd/system/
    owner: root
    group: root
    mode: '0644'
  when: ansible_os_family == 'Debian'
- name: Enable wg-quick
  systemd:
    name: "wg-quick@{{ wg_interface }}"
    enabled: yes
    state: started
  when: ansible_os_family == 'Debian'


- name: Install wireguard_runner
  copy:
    src: usr/local/sbin/wireguard_runner
    dest: /usr/local/sbin/wireguard_runner
    owner: root
    group: wheel
    mode: '0700'
  when: ansible_os_family == 'Darwin'
  tags:
    - wireguard_runner

- name: Install wireguard plist in LaunchDaemons
  template:
    src: Library/LaunchDaemons/com.wireguard.plist.j2
    dest: "/Library/LaunchDaemons/com.wireguard.{{ wg_interface }}.plist"
    owner: root
    group: wheel
    mode: '0644'
  when: ansible_os_family == 'Darwin'
  tags:
    - wireguard-plist

- name: Save and restart wg
  shell: "wg-quick save {{ wg_interface }} && wg-quick down {{ wg_interface }}; wg-quick up {{ wg_interface }} && launchctl unload /Library/LaunchDaemons/com.wireguard.{{ wg_interface }}.plist; launchctl load -w /Library/LaunchDaemons/com.wireguard.{{ wg_interface }}.plist"
  when: (wireguard_peer_vpn_ips_to_add | length>0) and (ansible_os_family == 'Darwin')

# Set up forwarding
- name: wireguard forwarding
  include_tasks:
    file: lib/wireguard_forwarding.yml
    apply:
      tags:
        - wireguard_forward
  vars:
    routes: "{{ wireguard_forwarding.routes }}"
    # name: "{{ wireguard_forwarding.routes[0].name }}"
    # src_ips: "{{ wireguard_forwarding.routes | map(attribute='src') }}"
    # dst_ips: "{{ wireguard_forwarding.routes | map(attribute='dst') }}"
  when: wireguard_forwarding is defined
  tags:
    - wireguard_forward






# - name: Install wireguard-exporter
#   copy:
#     src: "usr/bin/wireguard-exporter-{{ ansible_architecture }}"
#     dest: /usr/bin/wireguard-exporter
#     owner: root
#     group: root
#     mode: '0755'
#   when: wireguard_exporter is defined and wireguard_exporter
# - name: Install wireguard-exporter.service
#   template:
#     src: "wireguard-exporter.service.j2"
#     dest: "/lib/systemd/system/wireguard-exporter.service"
#     owner: root
#     group: root
#     mode: '0644'
#   when: wireguard_exporter is defined and wireguard_exporter
# - name: Enable wireguard-exporter
#   systemd:
#     name: wireguard-exporter
#     enabled: yes
#     state: started
#   when: wireguard_exporter is defined and wireguard_exporter
