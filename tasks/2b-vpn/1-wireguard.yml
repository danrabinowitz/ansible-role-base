# - set_fact:
#     wg_dir: "/usr/local/etc/wireguard"
#   when: ansible_os_family == 'Darwin'
# - set_fact:
#     wg_dir: "/etc/wireguard"
#   when: ansible_os_family == 'Debian'
# - name: Set perms for wg dir
#   file:
#     path: "{{ wg_dir }}"
#     owner: root
#     group: "{{ wheel_group }}"
#     mode: '0700'
# - name: Set perms for wg private key
#   file:
#     path: "{{ wg_dir }}/privatekey"
#     owner: root
#     group: "{{ wheel_group }}"
#     mode: '0400'

- set_fact:
    wireguard_peer_machine_names: "{{ wireguard_peer_machine_names_core | union(wireguard_peer_machine_names_additional_for_group) | difference( [ hostvars[inventory_hostname]['do_name'] ] ) }}"
  check_mode: no
  tags:
    - etc_hosts

- name: Convert names to wg ips
  local_action: "shell echo '{{ wireguard_peer_machine_names | join('\n')}}' | ../bin/names_to_wg_ips"
  changed_when: false
  check_mode: no
  register: wireguard_peer_ip_conversion

- set_fact:
    wireguard_peer_vpn_ips: "{{ wireguard_peer_ip_conversion.stdout_lines }}"
  check_mode: no

- name: Get wg ip of current inventory host
  local_action: "shell echo '{{ hostvars[inventory_hostname]['do_name'] }}' | ../bin/names_to_wg_ips"
  changed_when: false
  check_mode: no
  register: wireguard_ip_of_current_host_conversion

- set_fact:
    wireguard_ip_of_current_host: "{{ wireguard_ip_of_current_host_conversion.stdout }}"
  check_mode: no

- name: wireguard_ip_of_current_host
  debug:
    msg: "{{ wireguard_ip_of_current_host }}"
    # verbosity: "1"
  check_mode: no


- set_fact:
    path_prepend: "{{ 'PATH=/usr/local/bin:$PATH' if ansible_os_family == 'Darwin' else 'PATH=$PATH' }}"
  check_mode: no


- name: Get wg interface - real
  shell: "{{ path_prepend }}; wg | grep '^interface: ' | cut -d' ' -f2"
  changed_when: false
  check_mode: no
  register: wg_interface_real_reg

- set_fact:
    wg_interface_real: "{{ wg_interface_real_reg.stdout }}"
  check_mode: no
  when: wg_interface_real is not defined


- set_fact:
    wg_interface: "{{ 'utun0' if ansible_os_family == 'Darwin' else 'wg0' }}"
  check_mode: no
  # when: wg_interface is not defined

- name: Get wg ips of all peers
  shell: "{{ path_prepend }}; wg showconf {{ wg_interface_real }} | grep '^AllowedIPs ' | awk '{print $3}' | cut -d/ -f1"
  changed_when: false
  check_mode: no
  register: get_current_wireguard_peer_ips

- name: get_current_wireguard_peer_ips
  debug:
    msg: "{{ get_current_wireguard_peer_ips }}"
    # verbosity: "1"
  check_mode: no

- set_fact:
    wireguard_peer_vpn_ips_current: "{{ get_current_wireguard_peer_ips.stdout_lines }}"
  check_mode: no

- set_fact:
    wireguard_peer_vpn_ips_to_add: "{{ wireguard_peer_vpn_ips | difference(wireguard_peer_vpn_ips_current) }}"
  check_mode: no

- name: wireguard_peer_vpn_ips_to_add
  debug:
    msg: "{{ wireguard_peer_vpn_ips_to_add }}"
    # verbosity: "1"
  check_mode: no

- set_fact:
    wireguard_peer_vpn_ips_to_remove: "{{ wireguard_peer_vpn_ips_current | difference(wireguard_peer_vpn_ips) }}"
  check_mode: no
- name: wireguard_peer_vpn_ips_to_remove
  debug:
    msg: "{{ wireguard_peer_vpn_ips_to_remove }}"
    # verbosity: "1"
  check_mode: no

- name: Get wg add peer commands
  local_action: "shell echo '{{ wireguard_peer_vpn_ips_to_add | join('\n')}}' | ../bin/wg_ips_to_add_peer_commands '{{ wireguard_ip_of_current_host }}' {{ wg_interface_real }}"
  changed_when: false
  check_mode: no
  register: get_wireguard_add_peer_commands
  when: (wireguard_peer_vpn_ips_to_add | length>0)

- name: get_wireguard_add_peer_commands
  debug:
    msg: "{{ get_wireguard_add_peer_commands }}"
    # verbosity: "1"
  check_mode: no
  when: (wireguard_peer_vpn_ips_to_add | length>0)

- name: Add wg peers
  shell: "{{ path_prepend }};{{ item }}"
  with_items: "{{ get_wireguard_add_peer_commands.stdout_lines }}"
  when: (wireguard_peer_vpn_ips_to_add | length>0)

- name: Save and restart wg
  shell: "{{ path_prepend }}; wg-quick save {{ wg_interface }} && wg-quick down {{ wg_interface }} && wg-quick up {{ wg_interface }}"
  when: (wireguard_peer_vpn_ips_to_add | length>0) and (ansible_os_family == 'Debian')

# Start wg on bootup
- name: Install wg-quick service
  copy:
    src: lib/systemd/system/wg-quick@.service
    dest: /lib/systemd/system/
    owner: root
    group: root
    mode: '0644'
  when: ansible_os_family == 'Debian'
- name: Enable wg-quick
  systemd:
    name: "wg-quick@{{ wg_interface }}"
    enabled: yes
    state: started
  when: ansible_os_family == 'Debian'


- name: Install wireguard plist in LaunchDaemons
  template:
    src: Library/LaunchDaemons/com.wireguard.plist.j2
    dest: "/Library/LaunchDaemons/com.wireguard.{{ wg_interface }}.plist"
    owner: root
    group: wheel
    mode: '0644'
  when: ansible_os_family == 'Darwin'

- name: Save and restart wg
  shell: "wg-quick save {{ wg_interface }} && wg-quick down {{ wg_interface }}; wg-quick up {{ wg_interface }} && launchctl unload /Library/LaunchDaemons/com.wireguard.{{ wg_interface }}.plist; launchctl load -w /Library/LaunchDaemons/com.wireguard.{{ wg_interface }}.plist"
  when: (wireguard_peer_vpn_ips_to_add | length>0) and (ansible_os_family == 'Darwin')

# Set up forwarding
- name: wireguard forwarding
  include_tasks:
    file: lib/wireguard_forwarding.yml
    apply:
      tags:
        - wireguard_forward
  vars:
    name: "{{ wireguard_forwarding.routes[0].name }}"
    src_ips: "{{ wireguard_forwarding.routes[0].src }}"
    dst_ips: "{{ wireguard_forwarding.routes[0].dst }}"
  when: wireguard_forwarding is defined
  tags:
    - wireguard_forward






# - name: Install wireguard-exporter
#   copy:
#     src: "usr/bin/wireguard-exporter-{{ ansible_architecture }}"
#     dest: /usr/bin/wireguard-exporter
#     owner: root
#     group: root
#     mode: '0755'
#   when: wireguard_exporter is defined and wireguard_exporter
# - name: Install wireguard-exporter.service
#   template:
#     src: "wireguard-exporter.service.j2"
#     dest: "/lib/systemd/system/wireguard-exporter.service"
#     owner: root
#     group: root
#     mode: '0644'
#   when: wireguard_exporter is defined and wireguard_exporter
# - name: Enable wireguard-exporter
#   systemd:
#     name: wireguard-exporter
#     enabled: yes
#     state: started
#   when: wireguard_exporter is defined and wireguard_exporter
