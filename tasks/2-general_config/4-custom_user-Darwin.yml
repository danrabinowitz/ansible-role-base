- name: Add custom user
  user:
    name: "{{ custom_username }}"
    state: present
    createhome: yes
  register: add_custom_user_reg

- name: Get user password
  pause:
    prompt: Enter the password for the newly-created user {{ custom_username }}
    echo: no
  register: custom_user_pw
  no_log: true
  when: add_custom_user_reg.changed

- name: Update custom user
  user:
    name: "{{ custom_username }}"
    password: "{{ custom_user_pw.user_input }}"
    shell: /bin/zsh
    state: present
    # createhome: yes
    # groups: wheel
    # append: yes
  when: add_custom_user_reg.changed

# - name: Require password reset
#   command: pwpolicy -u "{{ custom_username }}" -setpolicy "newPasswordRequired=1"
#   when: add_custom_user_reg.changed
- name: Set Real Name
  command: dscl . create /Users/{{ custom_username }} RealName "{{ custom_user_full_name }}"
  when: add_custom_user_reg.changed and custom_user_full_name is defined

# sudo defaults write /Library/Preferences/com.apple.loginwindow SHOWOTHERUSERS_MANAGED -bool FALSE
- community.general.osx_defaults:
    domain: /Library/Preferences/com.apple.loginwindow
    key: SHOWOTHERUSERS_MANAGED
    type: bool
    value: "TRUE"
    state: present

- name: Check for custom user and Filevault
  shell: fdesetup list | grep -c '^{{ custom_username }},' || true
  register: custom_user_filevault_check_reg
  check_mode: no
  changed_when: false

- name: Fail if custom user does not have access to Filevault
  fail:
    msg: "ERROR: {{ custom_username }} does not have access to Filevault. Log out if logged in. If that doesn't prompt you, then run this: fdesetup add -usertoadd {{ custom_username }} -user {{ admin_username }}"
  when: not ansible_check_mode and custom_user_filevault_check_reg.stdout != "1"

# fdesetup list | grep -c '^bob,'

# - name: Add custom user to Filevault
#   command: fdesetup add -usertoadd {{ custom_username }} -user {{ admin_username }}
#   # when: add_custom_user_reg.changed
#   tags:
#     - wip



# pwpolicy -a adminuser -u usertoforcechange -setpolicy "newPasswordRequired=1"


# - name: Create user
#   command: dscl . -create /Users/{{ custom_username }}
# - name: Set shell
#   command: dscl . -create /Users/{{ custom_username }} UserShell /bin/bash

# dscl . -create /Users/joeadmin
# dscl . -create /Users/joeadmin UserShell /bin/bash
# dscl . -create /Users/joeadmin RealName "Joe Admin" 
# dscl . -create /Users/joeadmin UniqueID "510"
# dscl . -create /Users/joeadmin PrimaryGroupID 20
# dscl . -create /Users/joeadmin NFSHomeDirectory /Users/joeadmin
# dscl . -passwd /Users/joeadmin password 

# dscl . -append /Groups/admin GroupMembership joeadmin

- name: Install .ssh for custom user
  file:
    path: /Users/{{ custom_username }}/.ssh
    state: directory
    owner: "{{ custom_username }}"
    # group: "{{ custom_username }}"
    mode: 0700

- name: Install authorized_keys
  template:
    src: .ssh/authorized_keys
    dest: /Users/{{ custom_username }}/.ssh/authorized_keys
    owner: "{{ custom_username }}"
    # group: "{{ custom_username }}"
    mode: 0600


# custom_admin_user
# - name: Add custom ADMIN user
#   user:
#     name: "{{ custom_admin_user }}"
#     state: present
#     createhome: yes
#   register: add_custom_admin_user_reg
#   when: custom_admin_user is defined
# - name: Update custom ADMIN user
#   user:
#     name: "{{ custom_admin_user }}"
#     password: "{{ custom_user_pw }}{{ custom_user_pw }}"
#     shell: /bin/zsh
#     state: present
#     # createhome: yes
#     # groups: wheel
#     # append: yes
#   when: add_custom_admin_user_reg.changed

- name: Check if user is hidden
  shell: dscl . read /Users/{{ custom_admin_user }} IsHidden | awk '{print $2}'
  register: custom_admin_user_hidden_reg
  check_mode: no
  changed_when: false
  when: custom_admin_user is defined
- name: Set IsHidden property
  shell: dscl . create /Users/{{ custom_admin_user }} IsHidden 1 && chflags hidden /Users/{{ custom_admin_user }}
  when: custom_admin_user is defined and custom_admin_user_hidden_reg.stdout != "1"

# - name: Require password reset
#   command: pwpolicy -u "{{ custom_admin_user }}" -setpolicy "newPasswordRequired=1"
#   when: add_custom_admin_user_reg.changed

- name: Adding user
  user:
    name: "{{ custom_username }}"
    groups: brew
    append: yes
