# TODO: Try a top-level anchor for djr-managed stuff, which starts with "block all" and then handles ssh, etc

# - name: Block all incoming connections by default
#   lineinfile:
#     path: /etc/pf.conf
#     line: 'block all'
#     # insertbefore: BOF
#   notify:
#     - Reload pfconf


- name: Declare com.djrtechconsulting anchor
  lineinfile:
    path: /etc/pf.conf
    line: 'anchor "com.djrtechconsulting/*"'
  notify:
    - Reload pfconf
- name: Load com.djrtechconsulting anchor
  lineinfile:
    path: /etc/pf.conf
    line: 'load anchor "com.djrtechconsulting" from "/etc/pf.anchors/com.djrtechconsulting"'
  notify:
    - Reload pfconf
  # tags:
  #   - wip

- name: Declare com.djrtechconsulting / SSH anchor
  lineinfile:
    path: /etc/pf.anchors/com.djrtechconsulting
    line: 'anchor "SSH"'
    create: yes
  notify:
    - Reload pfconf

- name: Load com.djrtechconsulting / SSH anchor
  lineinfile:
    path: /etc/pf.anchors/com.djrtechconsulting
    line: 'load anchor "SSH" from "/etc/pf.rules/pfssh.rule"'
  notify:
    - Reload pfconf

- name: Ensure /etc/pf.rules exists
  file:
    path: "/etc/pf.rules"
    state: directory
    owner: "root"
    group: "{{ wheel_group }}"
    mode: 0755

# ssh
- name: Block all ssh connections by default
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'block return in proto tcp from any to any port 22'
    create: yes
  notify:
    - Reload pfconf

- name: Allow connections from Dan's MBP
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 192.168.192.1/32 to any port 22 no state'
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBA
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 192.168.192.2/32 to any port 22 no state'
  notify:
    - Reload pfconf

- name: Allow connections from Dan's MBP via tailscale
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 100.114.172.117/32 to any port 22 no state'
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBA via tailscale
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 100.108.82.116/32 to any port 22 no state'
  notify:
    - Reload pfconf

- name: Allow connections from localhost when on dan's mbp
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 127.0.0.1/32 to any port 22 no state'
  when: allow_local_ansible | default(False)
  notify:
    - Reload pfconf

- name: Allow connections from utility server
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 10.0.0.1/32 to any port 22 no state'
  when: allow_ssh_from_utility | default(False)
  notify:
    - Reload pfconf

- name: Allow connections from devenv server
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 10.0.0.4/32 to any port 22 no state'
  when: allow_ssh_from_devenv | default(False)
  notify:
    - Reload pfconf

- name: Allow connections from Dan's phone
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 10.0.0.6/32 to any port 22 no state'
  when: allow_ssh_from_secure | default(False)
  notify:
    - Reload pfconf

- name: Allow connections from devenv-blue server
  lineinfile:
    path: /etc/pf.rules/pfssh.rule
    line: 'pass in inet proto tcp from 10.0.0.9/32 to any port 22 no state'
  when: allow_ssh_from_devenv | default(False)
  notify:
    - Reload pfconf



- name: Allow connections for tailscale
  lineinfile:
    path: /etc/pf.conf
    line: 'pass in inet proto udp to any port 41641 no state'
  notify:
    - Reload pfconf
- name: Block connections for http
  lineinfile:
    path: /etc/pf.conf
    line: 'block return in proto tcp from any to any port 80'
  notify:
    - Reload pfconf
- name: Block connections for https
  lineinfile:
    path: /etc/pf.conf
    line: 'block return in proto tcp from any to any port 443'
  notify:
    - Reload pfconf
- name: Block connections for syncthing
  lineinfile:
    path: /etc/pf.conf
    line: 'block return in proto tcp from any to any port 22000'
  notify:
    - Reload pfconf


# TODO: Opening these should be handled in the role for syncthing
- name: Allow connections for syncthing
  lineinfile:
    path: /etc/pf.conf
    line: 'pass in inet proto tcp from 100.92.40.93/32 to any port 22000 no state'
  notify:
    - Reload pfconf
- name: Allow connections for syncthing
  lineinfile:
    path: /etc/pf.conf
    line: 'pass in inet proto tcp from 10.0.0.8/32 to any port 22000 no state'
  notify:
    - Reload pfconf
- name: Allow connections for syncthing
  lineinfile:
    path: /etc/pf.conf
    line: 'pass in inet proto tcp from 100.114.172.117/32 to any port 22000 no state'
  notify:
    - Reload pfconf
- name: Allow connections for syncthing
  lineinfile:
    path: /etc/pf.conf
    line: 'pass in inet proto tcp from 192.168.192.1/32 to any port 22000 no state'
  notify:
    - Reload pfconf
- name: Allow connections for syncthing
  lineinfile:
    path: /etc/pf.conf
    line: 'pass in inet proto tcp from 100.108.82.116/32 to any port 22000 no state'
  notify:
    - Reload pfconf
- name: Allow connections for syncthing
  lineinfile:
    path: /etc/pf.conf
    line: 'pass in inet proto tcp from 192.168.192.2/32 to any port 22000 no state'
  notify:
    - Reload pfconf


- name: Block connections for Apple rapportd on tailscale
  lineinfile:
    path: /etc/pf.conf
    line: 'block return in proto tcp from 100.0.0.0/8 to any port 49348'
  notify:
    - Reload pfconf
- name: Block connections for Omnifocus on tailscale
  lineinfile:
    path: /etc/pf.conf
    line: 'block return in proto tcp from 100.0.0.0/8 to any port 49377'
  notify:
    - Reload pfconf


# TODO: The VNC stuff should be handled in the role for VNC
- name: Declare com.djrtechconsulting / VNC anchor
  lineinfile:
    path: /etc/pf.anchors/com.djrtechconsulting
    line: 'anchor "VNC"'
  notify:
    - Reload pfconf
- name: Load com.djrtechconsulting / VNC anchor
  lineinfile:
    path: /etc/pf.anchors/com.djrtechconsulting
    line: 'load anchor "VNC" from "/etc/pf.rules/pfvnc.rule"'
  notify:
    - Reload pfconf
# VNC (screen sharing)
- name: Block all connections by default
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'block return in proto tcp from any to any port 5900'
    create: yes
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBP
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'pass in inet proto tcp from 192.168.192.1/32 to any port 5900 no state'
  when: allow_vnc_from_secure | default(False)
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBA
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'pass in inet proto tcp from 192.168.192.2/32 to any port 5900 no state'
  when: allow_vnc_from_secure | default(False)
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBP
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'pass in inet proto tcp from 100.114.172.117/32 to any port 5900 no state'
  when: allow_vnc_from_secure | default(False)
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBA
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'pass in inet proto tcp from 100.108.82.116/32 to any port 5900 no state'
  when: allow_vnc_from_secure | default(False)
  notify:
    - Reload pfconf
# Kerberos, needed for VNC (screen sharing)
- name: Block all connections by default
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'block return in proto tcp from any to any port 88'
    create: yes
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBP
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'pass in inet proto tcp from 192.168.192.1/32 to any port 88 no state'
  when: allow_vnc_from_secure | default(False)
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBA
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'pass in inet proto tcp from 192.168.192.2/32 to any port 88 no state'
  when: allow_vnc_from_secure | default(False)
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBP
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'pass in inet proto tcp from 100.114.172.117/32 to any port 88 no state'
  when: allow_vnc_from_secure | default(False)
  notify:
    - Reload pfconf
- name: Allow connections from Dan's MBA
  lineinfile:
    path: /etc/pf.rules/pfvnc.rule
    line: 'pass in inet proto tcp from 100.108.82.116/32 to any port 88 no state'
  when: allow_vnc_from_secure | default(False)
  notify:
    - Reload pfconf



# TODO: https://github.com/drduh/macOS-Security-and-Privacy-Guide#firewall

# TODO: This should probably be in the system profile
- name: Check for stealth mode
  command: /usr/libexec/ApplicationFirewall/socketfilterfw --getstealthmode
  register: stealth_mode_check_reg
  changed_when: false
  check_mode: no

- name: Enable stealth mode
  command: /usr/libexec/ApplicationFirewall/socketfilterfw --setstealthmode on
  when: stealth_mode_check_reg.stdout == "Stealth mode disabled"



# TODO: I could probably just use which wireguard-go, right?
- name: Get wireguard-go path
  shell: echo "$(brew --cellar wireguard-go)/$(brew list --versions wireguard-go | awk '{print $2}')/bin/wireguard-go"
  environment:
    PATH: "{{ homebrew_prefix }}/bin:{{ ansible_env.PATH }}"
  register: wireguard_go_path_reg
  check_mode: no
  changed_when: false
  become: true
  become_user: "{{ admin_username }}"
  when: use_wireguard

- name: Debug wireguard_go_path_reg
  debug:
    var: wireguard_go_path_reg
    # verbosity: "1"
  check_mode: no
  when: use_wireguard

- name: Check if wireguard if allowed in the Application Firewall (ALF)
  shell: "/usr/libexec/ApplicationFirewall/socketfilterfw --listapps | grep -c '{{ wireguard_go_path_reg.stdout }}' || true"
  register: alf_wireguard_reg
  check_mode: no
  changed_when: false
  when: use_wireguard

- set_fact:
    alf_wireguard_allowed: "{{ alf_wireguard_reg.stdout == '1' }}"
  check_mode: no
  when: use_wireguard

- name: Debug alf_wireguard_allowed
  debug:
    var: alf_wireguard_allowed
    # verbosity: "1"
  check_mode: no
  when: use_wireguard

- name: Unblock wireguard for the Application Firewall (ALF)
  # shell: "/usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp {{ wireguard_go_path_reg.stdout }}"
  shell: "/usr/libexec/ApplicationFirewall/socketfilterfw --add {{ wireguard_go_path_reg.stdout }}"
  when: use_wireguard and (not alf_wireguard_allowed)




- set_fact:
    tailscaled_path: /usr/local/bin/tailscaled
  check_mode: no

- name: Check if tailscale if allowed in the Application Firewall (ALF)
  shell: "/usr/libexec/ApplicationFirewall/socketfilterfw --listapps | grep -c '{{ tailscaled_path }}' || true"
  register: alf_tailscale_reg
  check_mode: no
  changed_when: false

- set_fact:
    alf_tailscale_allowed: "{{ alf_tailscale_reg.stdout == '1' }}"
  check_mode: no

- name: Debug alf_tailscale_allowed
  debug:
    var: alf_tailscale_allowed
    # verbosity: "1"
  check_mode: no

- name: Unblock tailscale for the Application Firewall (ALF)
  # shell: "/usr/libexec/ApplicationFirewall/socketfilterfw --unblockapp {{ tailscaled_path }}"
  shell: "/usr/libexec/ApplicationFirewall/socketfilterfw --add {{ tailscaled_path }}"
  when: not alf_tailscale_allowed





# Enable ALF firewall
- name: Check if the Application Firewall (ALF) is enabled
  shell: "/usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate | grep -c 'Firewall is enabled' || true"
  register: alf_enabled_reg
  check_mode: no
  changed_when: false

- set_fact:
    alf_enabled: "{{ alf_enabled_reg.stdout == '1' }}"
  check_mode: no

- name: Enable the Application Firewall (ALF)
  shell: /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on
  when: not alf_enabled
