- name: "Security : Firewall : Allow ssh access from current ansible host's public ip, so we don't lock ourselves out"
  ufw:
    rule: allow
    port: ssh
    proto: tcp
    from_ip: "{{ ansible_host_public_ip }}"
    direction: in
    interface: eth0
  # At this early stage, we may not have created the real, custom admin account yet,
  # so we may need to specify the remote_user to be root.
  remote_user: "{{ test_user is success | ternary(omit, 'root') }}"

- name: "Security : Firewall : Allow ssh access from jumphost's ip"
  ufw:
    rule: allow
    port: ssh
    proto: tcp
    from_ip: "{{ jumphost_ip }}"
    direction: in
  when: not(
          (jumphost_ip is undefined)
          or
          (jumphost_ip is none)
          or
          (jumphost_ip | trim == '')
        )
  # At this early stage, we may not have created the real, custom admin account yet,
  # so we may need to specify the remote_user to be root.
  remote_user: "{{ test_user is success | ternary(omit, 'root') }}"

- name: "Security : Firewall : Enable ufw ASAP"
  ufw:
    state: enabled
    policy: deny
    logging: low
    direction: incoming
  # At this early stage, we may not have created the real, custom admin account yet,
  # so we may need to specify the remote_user to be root.
  remote_user: "{{ test_user is success | ternary(omit, 'root') }}"
