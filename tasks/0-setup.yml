- name: 'setup : Require mandatory variables'
  assert:
    that:
      - admin_username is defined
    fail_msg: "One or more required variables are missing."

# TODO: Make this part of the docker image
- name: Create ssh control directory if it does not exist
  local_action:
    module: file
    path: /root/.ansible/cp
    state: directory
    mode: '0700'
  changed_when: false
  check_mode: no
  tags:
    - always

- name: Print all available facts
  ansible.builtin.debug:
    var: ansible_facts

- name: "setup : Set real_ansible_ssh_host"
  set_fact:
     real_ansible_ssh_host: "{{ ansible_ssh_host }}"
  tags:
    - always

# Not certain what's going on, but running this seems to allow subsequent ansible ssh connections to succeed.
# ansible_ssh_host, inventory_hostname, real_ansible_ssh_host
- name: "setup : Connect directly via ssh to enable subsequent ansible ssh connections"
  local_action: "shell ssh -o ControlMaster=auto -o ControlPersist=1800s -o 'User=\"{{ admin_username }}\"' -o ConnectTimeout=10 -o ControlPath=/root/.ansible/cp/ansible-ssh-%h-%p-%r {{ real_ansible_ssh_host }} '/bin/sh -c '\"'\"'echo ~{{ admin_username }} && sleep 0'\"'\"''"
  changed_when: false
  check_mode: no
  when: not (skip_ssh_setup | default(False))
  tags:
    - always

- name: Collect only facts needed for ansible-role-base
  setup:
    gather_subset:
      - '!all'
      - virtual # used for ansible_os_family
  tags:
    - always

- name: Debug ansible_os_family
  debug:
    var: ansible_os_family
    verbosity: 1
  check_mode: no
  tags:
    - always

# - name: Fail
#   fail:
#     msg: Dan fail

# Is this really needed for MacOS?
- name: "setup : Set wheel_group"
  set_fact:
     wheel_group: "{{ 'wheel' if ansible_os_family == 'Darwin' else 'wheel' }}"
  tags:
    - always

- set_fact:
    # goos: "{{ 'darwin' if ansible_os_family == 'Darwin' else '' }}"
    goos: "{{ d[ansible_os_family] | default ('unknown-goos') }}"
  vars:
    d: {Darwin: 'darwin', "OtherLinux": "linux", "Debian": "linux"}
  check_mode: no
  tags:
    - always

- set_fact:
    goarch: "{{ d[ansible_architecture] | default ('unknown-goarch') }}"
  vars:
    d: {'arm64': 'arm64', 'x86_64': 'amd64'}
    # goarch: "{{ ansible_architecture if ansible_architecture in ['arm64'] elif ansible_architecture = 'amd64' }}"
    # goarch: "{{ ansible_architecture }}"
  check_mode: no
  tags:
    - always

- name: Print ansible_architecture
  ansible.builtin.debug:
    var: ansible_architecture
    verbosity: 1
  tags:
    - always

- name: "setup : apple rosetta"
  set_fact:
     apple_rosetta_cmd: "{{ 'arch -x86_64 ' if ansible_os_family == 'Darwin' and ansible_architecture == 'arm64' else '' }}"
  when: ansible_os_family == 'Darwin'
  tags:
    - always

- name: Print apple_rosetta_cmd
  ansible.builtin.debug:
    var: apple_rosetta_cmd
    verbosity: 1
  when: ansible_os_family == 'Darwin'
  tags:
    - always

- name: "setup : homes_base"
  set_fact:
     homes_base: "{{ '/Users' if ansible_os_family == 'Darwin' else '/home' }}"
  tags:
    - always

# homebrew is used for:
# jq (which is used to get tailscale IPs)
- include: 0b-homebrew.yml
  tags:
    - homebrew
  when: ansible_os_family == 'Darwin' and use_homebrew
