- include: 1-gather_facts.yml

# Install
# - name: "VPN : Wireguard : Add repository"
#   apt_repository:
#     repo: "ppa:wireguard/wireguard"
#     state: present
#     update_cache: yes

# - name: "VPN: Wireguard: Install WireGuard"
#   package:
#     name: "{{ item }}"
#     state: latest
#   with_items:
#     - wireguard-dkms
#     - wireguard-tools

# # Generate keys
# - name: "VPN: Wireguard: Create directory for config"
#   file:
#     path: "/etc/wireguard"
#     state: directory
#     owner: "root"
#     group: "root"
#     mode: 0700
# - name: "VPN: Wireguard: Create keys"
#   shell: "wg genkey | tee /etc/wireguard/privatekey | wg pubkey > /etc/wireguard/publickey"
#   args:
#     creates: "/etc/wireguard/publickey"
#   diff: False
#   no_log: True

- name: "VPN: Wireguard: Get public key"
  slurp:
    src: /etc/wireguard/publickey
  register: wireguard_publickey

# Configure
# - name: "VPN: Wireguard: Debug: ansible_fqdn"
#   debug:
#     var: ansible_fqdn
#     # verbosity: "1"
# - name: "VPN: Wireguard: Debug: wireguard_ip_addresses[ansible_fqdn]"
#   debug:
#     var: wireguard_ip_addresses[ansible_fqdn]
#     # verbosity: "1"

- name: "VPN: Wireguard: Create config template"
  template:
    src: "etc/wireguard/wg0.conf.template.j2"
    dest: "/etc/wireguard/wg0.conf.template"
    owner: "root"
    group: "root"
    mode: 0400
  when: not(
          (wireguard_ip_addresses[ansible_fqdn] is undefined)
        )

- name: "VPN: Wireguard: Create config"
  shell: "PrivateKey=$(cat /etc/wireguard/privatekey) envsubst '$PrivateKey' < /etc/wireguard/wg0.conf.template > /etc/wireguard/wg0.conf"
  args:
    creates: "/etc/wireguard/wg0.conf"
  diff: False
  no_log: True
  when: not(
          (wireguard_ip_addresses[ansible_fqdn] is undefined)
        )

# Open port in VPN
- name: "VPN: Wireguard: Allow firewall to accept wireguard traffic"
  ufw:
    rule: allow
    port: "51820"
    proto: udp
    direction: in
